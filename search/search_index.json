{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Cloud Computing \u00b6 The Introduction to Cloud Computing workshop was created in November 2020 for the Powercoders project with the intention to teach the participants how to deploy a website in the cloud using an Apache HTTP Server httpd running on RedHat OpenShift 4.5. Definition \u00b6 NIST Definition of Cloud Computing 1 \u00b6 Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. The NIST cloud model is composed of five essential characteristics: On-demand self-service Broad network access Resource pooling Rapid elasticity Measured service Service Models \u00b6 Software as a Service (SaaS) is a service model where applications running on a cloud infrastructure are offered to the customers. The customer itself does not need to manage or control underlying infrastructure such as network, storage, operating systems or servers. However, some limited user configuration of the application might be possible. In general the applications are accessed using a thin client (e.g. web browser). Examples: Slack, Microsoft365, Dropbox, Zoom Platform as a Service (PaaS) is a service model which offers an environment to deploy and operate customer-created application on a cloud infrastructure. The applications can be developed using programming languages, tools and libraries which are supported by the provider. As for SaaS, the customer does not need to manage or control the underlying infrastructure himself. Examples: OpenShift, Azure Kubernetes Service (AKS), Heroku Infrastructure as a Service (IaaS) is a service model where a customer can provision fundamental computing resources as well as storage and networks. The customer has full control of the software (i.e. applications and operating system) on the system, whereas the underlying cloud infrastructure remains controlled and managed by the provider. Examples: Google Compute Engine (GCE), Amazon Web Services (AWS), Microsoft Azure Deployment Models \u00b6 Public Cloud . The cloud infrastructure offered by third-party providers (e.g. Microsoft Azure, Amazon Web Services, Google Cloud, Alibaba Cloud) to be used by the general public. Private Cloud . The cloud infrastructure is dedicated to a single organization and the provisioned resources are only shared within the business units of that organization. The infrastructure is often owned by the organization and deployed on-premise. Hybrid Cloud is a combination of the previously introduced deployment models. The private and public cloud's resource are still independent from each other, however the services are connected, which enables the portability of data and applications. Why Cloud? \u00b6 Focus \u00b6 Cloud Computing enables organizations to focus on application development because they don't need to take additional efforts to install and maintain the infrastructure (e.g. servers, storage, networks) needed in order to run their application and services. Additionally, cloud services abstract the complexity of the technical layers by providing a single API to interact with the underlaying infrastructure which facilitate DevOps practices. Scalability \u00b6 Cloud infrastructure can be provisioned rapidly and on-demand, allowing organizations to react flexibly to changes in the demand for their services. The resources in the cloud, and therefore often the applications running on them, can be scaled up and down in time in order to support fluctuating workloads. Cost Savings \u00b6 In the cloud the compute resources are often charged based on usage ( pay-as-you-go ). Therefore an organization does not spend money on features they don't want to use or spends less money for features which are only used rarely. Due to the flexibility in the cloud, no overcapacity which might only be used in the near future is required, which also further reduces the costs. Peter M. Mell and Timothy Grance. 2011. SP 800-145. The NIST Definition of Cloud Computing. Technical Report. National Institute of Standards & Technology, Gaithersburg, MD, USA. Link \u21a9","title":"Introduction"},{"location":"#introduction-to-cloud-computing","text":"The Introduction to Cloud Computing workshop was created in November 2020 for the Powercoders project with the intention to teach the participants how to deploy a website in the cloud using an Apache HTTP Server httpd running on RedHat OpenShift 4.5.","title":"Introduction to Cloud Computing"},{"location":"#definition","text":"","title":"Definition"},{"location":"#why-cloud","text":"","title":"Why Cloud?"},{"location":"configmap/","text":"Exercise 4 - ConfigMaps \u00b6 We want to change the index.html served by the Apache HTTP Server in order to personalize our website. There are multiple approaches to achieve this: change the container image by adding the file during the build to the image (out of scope for this workshop) use a ConfigMap to inject the file to the container in the Pod ConfigMap provides a mechanisms to inject containers with configuration data (entire files or single values) while keeping the containers unchanged. Check out the OpenShift or Kubernetes Documentation for more information about ConfigMaps . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI) Create a ConfigMap \u00b6 Switch to the 'Administrator' view using the dropdown menu at . Navigate to 'Workloads' \u2192 'Config Maps' . Switch to the your project using the dropdown menu at . In each of the exercise make sure that you are in your project context before you are making any changes. Press 'Create Config Map' . Create a ConfigMap with the index.html using the content below: <!DOCTYPE html> < html > < head > < title > John Doe </ title > </ head > < body > < h1 > John Doe </ h1 > < p > Today I learned how to deploy my own website in the cloud using an Apache HTTP Server (httpd) running on OpenShift. </ p > </ body > </ html > (replace John Doe with your actual name - if you are John Doe you can skip this) Try to create the ConfigMap definition file on your own using the template at and the additional schema information Solution: apiVersion : v1 kind : ConfigMap metadata : name : httpd data : index.html : |- <!DOCTYPE html> <html> <head> <title>John Doe</title> </head> <body> <h1>John Doe</h1> <p> Today I learned how to deploy my own website in the cloud using an Apache HTTP Server (httpd) running on OpenShift. </p> </body> </html> Press 'Create' . Mount a ConfigMap \u00b6 Navigate to 'Workloads' \u2192 'Deployments' . Open the 'Deployment Details' by clicking on the 'Name' . Switch to the 'YAML' tab . Add the highlighted parts to the Deployment defintion file in the editor : apiVersion: apps/v1 kind: Deployment ... spec: ... template: metadata: creationTimestamp: null labels: app: httpd spec: volumes: - name: html configMap: name: <configmap name> containers: - image: rhscl/httpd-24-rhel7:latest volumeMounts: - name: html mountPath: /var/www/html ... Press 'Save' . Reload your web site using the URL of the Route created in Exercise 3 . Important At the beginning of the exercise make sure that you are in your project context. oc project <project name> Create a ConfigMap \u00b6 Create a index.html file using the vi editor with the following content: <!DOCTYPE html> < html > < head > < title > John Doe </ title > </ head > < body > < h1 > John Doe </ h1 > < p > Today I learned how to deploy my own website in the cloud using an Apache HTTP Server (httpd) running on OpenShift. </ p > </ body > </ html > (replace John Doe with your actual name - if you are John Doe you can skip this) Create a ConfigMap with the index.html . Try to figure out how to create a new configmap named httpd based on a file using oc create configmap -h Solution: oc create configmap httpd --from-file=index.html Inspect a ConfigMap \u00b6 Inspect the created ConfigMap using oc get and oc describe . oc get configmaps oc describe configmap <configmap name> Also check the ConfigMap in the Web Console. Mount a ConfigMap \u00b6 Let's add the ConfigMap to the Pod template in the Deployment . The oc edit command allows us to edit existing resources using the vi editor . oc edit deployment <deployment name> Add the highlighted parts to the Deployment : apiVersion: apps/v1 kind: Deployment ... spec: ... template: metadata: creationTimestamp: null labels: app: httpd spec: volumes: - name: html configMap: name: <configmap name> containers: - image: rhscl/httpd-24-rhel7:latest volumeMounts: - name: html mountPath: /var/www/html ... Store and close the file. The configuration change triggers automatically a redeployment of all your Pods - wait a couple of seconds until it is done. Reload your web site using the URL of the Route created in Exercise 3 . \ud83c\udf89 Congratulations, you have made it! \u00b6 You have successfully deployed your first personal website in the cloud using OpenShift. \ud83d\udc4f","title":"Exercise 4 - ConfigMaps"},{"location":"configmap/#exercise-4-configmaps","text":"We want to change the index.html served by the Apache HTTP Server in order to personalize our website. There are multiple approaches to achieve this: change the container image by adding the file during the build to the image (out of scope for this workshop) use a ConfigMap to inject the file to the container in the Pod ConfigMap provides a mechanisms to inject containers with configuration data (entire files or single values) while keeping the containers unchanged. Check out the OpenShift or Kubernetes Documentation for more information about ConfigMaps . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI)","title":"Exercise 4 - ConfigMaps"},{"location":"deployment/","text":"Exercise 2 - Deployments \u00b6 You describe the desired state of your application in a Deployment by specifying the number of replicas and a Pod template. The Deployment involve a ReplicaSet to manage the Pods in the background. The ReplicaSet ensures that specified number of Pod replicas are running all the time. If a Pod crashes or is deleted the ReplicaSet creates new instances up to the defined number. Likewise, if there are more Pods running than desired, it deletes as many as necessary. Check out the OpenShift or Kubernetes Documentation for more information about Deployments and ReplicaSets . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI) Create a Deployment \u00b6 Switch to the 'Administrator' view using the dropdown menu at . Navigate to 'Workloads' \u2192 'Deployments' . Switch to the your project using the dropdown menu at . In each of the exercise make sure that you are in your project context before you are making any changes. Press 'Create Deployment' . Copy the following Deployment definition file to the editor : apiVersion : apps/v1 kind : Deployment metadata : name : httpd labels : app : httpd spec : replicas : 1 selector : matchLabels : app : httpd template : metadata : labels : app : httpd spec : containers : - name : httpd-24 image : rhscl/httpd-24-rhel7:latest More detailed information about the Deployment definition file can be found in the Tab at . Press 'Create' . Inspect a Deployment \u00b6 Note If you have created the Deployment using the CLI: Repeat the steps 1 - 3 of the 'Create a Deployment' task above Open the 'Deployment Details' by clicking on the Deployment name in the 'Deployments' overview table. Check the 'Details' and status of the Pods of a Deployment by moving the mouse over the blue circle . The status should be 'Running' after a couple of seconds. Additionally check the 'Pods' and the 'Events' What is the difference between the Pod that was created manually and the one that was created by the Deployment ? Solution: The Pod created from the Deployment have a random name. Example: httpd-12cf4d11ce-p9w5h The Deployment adds a random string (e.g. 12cf4d11ce ) to the deployment name while creating the ReplicaSet . The ReplicaSet itself adds another random string to the each Pod (e.g. p9w5h ). What happens if you delete a pod by opening in the 'Pods' tab and clicking ? Solution: The ReplicaSet of the Deployment automatically creates a new Pod . The same would happen if the application in the container of the Pod crashed or terminated. Check the 'Events' again to see what happend. Scale a Deployment \u00b6 Scale the Deployment to have another Pod of the application to achieve a redundant and stable setup by clicking on the up arrow at . Wait until both Pods are running and inspect agin the 'Events' . Important At the beginning of the exercise make sure that you are in your project context. oc project <project name> Create a Deployment \u00b6 Create a Deployment of the Apache HTTP Server using the oc create command: oc create deployment httpd --image rhscl/httpd-24-rhel7:latest The output of the command should look this: [~] $ oc create deployment httpd --image rhscl/httpd-24-rhel7:latest deployment.apps/httpd created Inspect a Deployment \u00b6 Let's verify the state of the Deployment that you have created using oc get and oc describe . oc get deployments -o wide oc describe deployment <deployment name> Inspect the pods the Deployment has created. oc get pods oc get pods -o wide What is the difference between the Pod that was created manually and the one that was created by the Deployment ? Solution: The Pod created from the Deployment have a random name. Example: httpd-12cf4d11ce-p9w5h The Deployment adds a random string (e.g. 12cf4d11ce ) to the deployment name while creating the ReplicaSet . The ReplicaSet itself adds another random string to the each Pod (e.g. p9w5h ). What happens if you delete a pod using oc delete pod <pod name> ? Solution: The ReplicaSet of the Deployment automatically creates a new Pod . The same would happen if the application in the container of the Pod crashed or terminated. Also check the 'Inspect a Deployment' section for the Web Console. Scale a Deployment \u00b6 Scale the Deployment to have another Pod of the application to achieve a redundant and stable setup. oc scale deployment <deployment name> --replicas=2 Inspect the Deployment and pods again.","title":"Exercise 2 - Deployments"},{"location":"deployment/#exercise-2-deployments","text":"You describe the desired state of your application in a Deployment by specifying the number of replicas and a Pod template. The Deployment involve a ReplicaSet to manage the Pods in the background. The ReplicaSet ensures that specified number of Pod replicas are running all the time. If a Pod crashes or is deleted the ReplicaSet creates new instances up to the defined number. Likewise, if there are more Pods running than desired, it deletes as many as necessary. Check out the OpenShift or Kubernetes Documentation for more information about Deployments and ReplicaSets . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI)","title":"Exercise 2 - Deployments"},{"location":"networking/","text":"Exercise 3 - Networking \u00b6 Each Pod has its own IP address in order to access the application on it over the network. However, Pods are non-permanent resources which are created and destroyed by the Deployment dynamically. Therefore the IP addresses of your application are changing dynamically too and it is difficult to keeps track of which IP address to connect to. Services \u00b6 The Service is an abstract way to expose an application running on a set of Pods and load-balance the requests across them. Instead of connecting to the IP addresses of the Pods directly you can connect instead to its Service . Check out the Kubernetes Documentation for more information about Services . Routes \u00b6 The Route allows to expose services through HTTP(S) via a public DNS entry. This is needed to make Services accessible from outside of the cluster. Check out the OpenShift Documentation for more information about Routes . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI) Create a Service \u00b6 Switch to the 'Administrator' view using the dropdown menu at . Navigate to 'Networking' \u2192 'Services' . Switch to the your project using the dropdown menu at . In each of the exercise make sure that you are in your project context before you are making any changes. Press 'Create Service' . Let's create a Service for the port 8080 . Copy the following Service definition file to the editor and replace <port> and <app label> with the correct value: apiVersion : v1 kind : Service metadata : name : httpd spec : selector : app : <app label> ports : - protocol : TCP port : <port> More detailed information about the Service definition file can be found in the Tab at . Press 'Create' . Create a Route \u00b6 Navigate to 'Networking' \u2192 'Routes' . Press 'Create Route' . Set the 'Name' to httpd . Select the 'Service' you have created above in . Choose the 'Target Port' 8080 from the dropdown menu . Let's secure the Route by enabling the checkbox and selecting 'Edge' for 'TLS Termination' . Scroll until the end of the page and press 'Create'. Open the link at the 'Route Details' page in order to test the route. Important At the beginning of the exercise make sure that you are in your project context. oc project <project name> Create a Service \u00b6 Create a Service for the port 8080 of the Deployment that we have created in Exercise 2 : oc expose deployment <deployment name> --port=<port> Inspect the Service using the oc get or the oc describe command. oc get service -o wide oc describe service <service name> How many endpoints are connected to your Service and why? Solution: There are 2 endpoints connected to your Service , you can figure that out by using the oc describe command. [~] $ oc describe service <service name> ... Endpoints: <IP endpoint 1>:8080,<IP endpoint 2>:8080 ... The reason that there are 2 endpoints is that we have 2 replicas configured in the Deployment . Let's compare the IP addresses of the endpoints with the IP address of each Pod . The IP address of the Pods can be retrieved using the oc get pods -o wide command. As you can see the Service is successfully connected to all Pods of your Deployment . Create a Route \u00b6 Create a Route in order to make the Service accessible from outside of the cluster. oc create route edge httpd --service=<service name> Inspect the new Route using the oc get command. oc get routes Try to connect to the https://HOST of the Route using the browser in order to test the route.","title":"Exercise 3 - Networking"},{"location":"networking/#exercise-3-networking","text":"Each Pod has its own IP address in order to access the application on it over the network. However, Pods are non-permanent resources which are created and destroyed by the Deployment dynamically. Therefore the IP addresses of your application are changing dynamically too and it is difficult to keeps track of which IP address to connect to.","title":"Exercise 3 - Networking"},{"location":"networking/#services","text":"The Service is an abstract way to expose an application running on a set of Pods and load-balance the requests across them. Instead of connecting to the IP addresses of the Pods directly you can connect instead to its Service . Check out the Kubernetes Documentation for more information about Services .","title":"Services"},{"location":"networking/#routes","text":"The Route allows to expose services through HTTP(S) via a public DNS entry. This is needed to make Services accessible from outside of the cluster. Check out the OpenShift Documentation for more information about Routes . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI)","title":"Routes"},{"location":"pod/","text":"Exercise 1 - Pods \u00b6 The goal of this exercise is to run our first application, an Apache HTTP Server, in OpenShift. For this we use a Pod which is the smallest deployable unit of computing that you can create and manage in OpenShift. A Pod is a group of one or more containers. In this exercise, we will deploy a Pod that runs a single container with the image rhscl/httpd-24-rhel7:latest . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI) Create a Pod \u00b6 Switch to the 'Administrator' view using the dropdown menu at . Navigate to 'Workloads' \u2192 'Pods' . Switch to the your project using the dropdown menu at . In each of the exercise make sure that you are in your project context before you are making any changes. Press 'Create Pod' . Copy the following Pod definition file to the editor : apiVersion : v1 kind : Pod metadata : name : httpd spec : containers : - name : httpd-24 image : rhscl/httpd-24-rhel7:latest More detailed information about the Pod definition file can be found in the Tab at . Press 'Create' . Inspect a Pod \u00b6 Note If you have created the Pod using the CLI: Repeat the steps 1 - 3 of the 'Create a Pod' task above Open the 'Pod Details' by clicking on the Pod name in the 'Pods' overview table. Check the status of the Pod at . The status should be 'Running' after a couple of seconds. Check the 'Details' of your Pod . In order to verify if the application in the Pod was started successfully, have a quick look into the 'Logs' . Also check the 'Inspect a Pod' section for the CLI. Delete a Pod \u00b6 You won't need the Pod in the following exercises, therefore clean up your project. Navigate to the 'Actions' dropdown menu in the 'Pod Details'. Press 'Delete Pod' . Important At the beginning of the exercise make sure that you are in your project context. oc project <project name> (replace <projet name> with the actual name of your own project) Create a Pod \u00b6 Create a Pod definition file called pod.yaml using the vi editor with the following content: apiVersion : v1 kind : Pod metadata : name : httpd spec : containers : - name : httpd-24 image : rhscl/httpd-24-rhel7:latest More detailed information about the Pod definition file can be found in the OpenShift or Kubernetes Documentation. Create a Pod by using the oc apply command. oc apply -f pod.yaml The output of the command should look like this: [~] $ oc apply -f pod.yaml pod/httpd created Inspect a Pod \u00b6 Let's verify the state of the Pod that you have created using oc get . oc get pods You can choose the output format <output format> with the -o flag. Try some of the formats: wide , json , yaml oc get pods -o <output format> oc describe can be used to get detailed description of a given resource. Inspect the information and events of your Pod . oc describe pod <pod name> Print the logs for a container in a Pod using the oc logs command in order to check if the application in the Pod was started successfully. oc logs <pod name> Also check the 'Inspect a Pod' section for the Web Console. Delete a Pod \u00b6 You won't need the Pod in the following exercises, therefore clean up your project. oc delete pod <pod name>","title":"Exercise 1 - Pods"},{"location":"pod/#exercise-1-pods","text":"The goal of this exercise is to run our first application, an Apache HTTP Server, in OpenShift. For this we use a Pod which is the smallest deployable unit of computing that you can create and manage in OpenShift. A Pod is a group of one or more containers. In this exercise, we will deploy a Pod that runs a single container with the image rhscl/httpd-24-rhel7:latest . Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI)","title":"Exercise 1 - Pods"},{"location":"project/","text":"Exercise 0 - Projects \u00b6 First of all everyone needs his own OpenShift Project, so let's create one. Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI) Create a Project \u00b6 Switch to the 'Administartor' view using the dropdown menu at . Navigate to 'Home' \u2192 'Projects' . Press 'Create Project' . Set the 'Name' to playground-user<id> (replace <id> with your actual ID) and choose a 'Display Name' as well as a 'Description' (write down your 'Project Name' you will need that in the following Exercises). Press 'Create' . Create your own 'Project' using the oc new-project command and write down your 'Project Name' you will need that in the following Exercises. oc new-project playground-user<id> (replace <id> with your actual ID) Switch to your 'Project' using oc project . oc project <project name>","title":"Exercise 0 - Projects"},{"location":"project/#exercise-0-projects","text":"First of all everyone needs his own OpenShift Project, so let's create one. Note For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line Interface (CLI)' section in oder to complete the exercise. Web Console Command Line Interface (CLI)","title":"Exercise 0 - Projects"},{"location":"vieditor/","text":"vi Editor \u00b6 View a file \u00b6 Open a file: vi <file name> Close the file by typing :q and press ENTER Edit/Create a file \u00b6 Open or create a file: vi <file name> Press i to activate the insert mode Navigate to the right location using the arrow keys: \u2190 \u2191 \u2192 \u2193 Modify or add some content Note Use Ctrl Shift + c and Ctrl Shift + v for copy/paste content in the vi editor`. Press ESC to exit the insert mode Store and close the file by typing :wq and press ENTER","title":"vi Editor"},{"location":"vieditor/#vi-editor","text":"","title":"vi Editor"},{"location":"vieditor/#view-a-file","text":"Open a file: vi <file name> Close the file by typing :q and press ENTER","title":"View a file"},{"location":"vieditor/#editcreate-a-file","text":"Open or create a file: vi <file name> Press i to activate the insert mode Navigate to the right location using the arrow keys: \u2190 \u2191 \u2192 \u2193 Modify or add some content Note Use Ctrl Shift + c and Ctrl Shift + v for copy/paste content in the vi editor`. Press ESC to exit the insert mode Store and close the file by typing :wq and press ENTER","title":"Edit/Create a file"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Cloud Computing","text":"<p>The Introduction to Cloud Computing workshop was created in November 2020 for the Powercoders project with the intention to teach the participants how to deploy a website in the cloud using an Apache HTTP Server <code>httpd</code> running on RedHat OpenShift 4.5.</p>"},{"location":"#definition","title":"Definition","text":""},{"location":"#nist-definition-of-cloud-computing-1","title":"NIST Definition of Cloud Computing <sup>1</sup>","text":"<p>Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.</p> <p>The NIST cloud model is composed of five essential characteristics:</p> <ul> <li>On-demand self-service</li> <li>Broad network access</li> <li>Resource pooling</li> <li>Rapid elasticity</li> <li>Measured service</li> </ul>"},{"location":"#service-models","title":"Service Models","text":"<p>Software as a Service (SaaS) is a service model where applications running on a cloud infrastructure are offered to the customers. The customer itself does not need to manage or control underlying infrastructure such as network, storage, operating systems or servers. However, some limited user configuration of the application might be possible. In general the applications are accessed using a thin client (e.g. web browser).</p> <p>Examples: Slack, Microsoft365, Dropbox, Zoom</p> <p>Platform as a Service (PaaS) is a service model which offers an environment to deploy and operate customer-created application on a cloud infrastructure. The applications can be developed using programming languages, tools and libraries which are supported by the provider. As for SaaS, the customer does not need to manage or control the underlying infrastructure himself.</p> <p>Examples: OpenShift, Azure Kubernetes Service (AKS), Heroku</p> <p>Infrastructure as a Service (IaaS) is a service model where a customer can provision fundamental computing resources as well as storage and networks. The customer has full control of the software (i.e. applications and operating system) on the system, whereas the underlying cloud infrastructure remains controlled and managed by the provider.</p> <p>Examples: Google Compute Engine (GCE), Amazon Web Services (AWS), Microsoft Azure</p>"},{"location":"#deployment-models","title":"Deployment Models","text":"<p>Public Cloud. The cloud infrastructure offered by third-party providers (e.g. Microsoft Azure, Amazon Web Services, Google Cloud, Alibaba Cloud) to be used by the general public.</p> <p>Private Cloud. The cloud infrastructure is dedicated to a single organization and the provisioned resources are only shared within the business units of that organization. The infrastructure is often owned by the organization and deployed on-premise.</p> <p>Hybrid Cloud is a combination of the previously introduced deployment models. The private and public cloud's resource are still independent from each other, however the services are connected, which enables the portability of data and applications.</p>"},{"location":"#why-cloud","title":"Why Cloud?","text":""},{"location":"#focus","title":"Focus","text":"<p>Cloud Computing enables organizations to focus on application development because they don't need to take additional efforts to install and maintain the infrastructure (e.g. servers, storage, networks) needed in order to run their application and services. Additionally, cloud services abstract the complexity of the technical layers by providing a single API to interact with the underlaying infrastructure which facilitate DevOps practices.</p>"},{"location":"#scalability","title":"Scalability","text":"<p>Cloud infrastructure can be provisioned rapidly and on-demand, allowing organizations to react flexibly to changes in the demand for their services. The resources in the cloud, and therefore often the applications running on them, can be scaled up and down in time in order to support fluctuating workloads.</p>"},{"location":"#cost-savings","title":"Cost Savings","text":"<p>In the cloud the compute resources are often charged based on usage (pay-as-you-go). Therefore an organization does not spend money on features they don't want to use or spends less money for features which are only used rarely. Due to the flexibility in the cloud, no overcapacity which might only be used in the near future is required, which also further reduces the costs.  </p> <ol> <li> <p>Peter M. Mell and Timothy Grance. 2011. SP 800-145. The NIST Definition of Cloud Computing. Technical Report. National Institute of Standards &amp; Technology, Gaithersburg, MD, USA. Link \u21a9</p> </li> </ol>"},{"location":"configmap/","title":"Exercise 4 - ConfigMaps","text":"<p>We want to change the <code>index.html</code> served by the Apache HTTP Server in order to personalize our website. There are multiple approaches to achieve this:</p> <ul> <li>change the container image by adding the file during the build to the image (out of scope for this workshop)</li> <li>use a <code>ConfigMap</code> to inject the file to the container in the <code>Pod</code></li> </ul> <p><code>ConfigMap</code> provides a mechanisms to inject containers with configuration data (entire files or single values) while keeping the containers unchanged. </p> <p>Check out the OpenShift or Kubernetes Documentation for more information about <code>ConfigMaps</code>.</p> <p>Note</p> <p>For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line  Interface (CLI)' section in oder to complete the exercise.</p> Web ConsoleCommand Line Interface (CLI) <p>Important</p> <p>At the beginning of the exercise make sure that you are in your project context.  <pre><code>oc project &lt;project name&gt; \n</code></pre></p>"},{"location":"configmap/#create-a-configmap","title":"Create a <code>ConfigMap</code>","text":"<ol> <li>Switch to the 'Administrator' view using the dropdown menu at .</li> <li>Navigate to 'Workloads' \u2192 'Config Maps' .</li> <li>Switch to the your project using the dropdown menu at .    In each of the exercise make sure that you are in your project context before you are making any changes.</li> <li>Press 'Create Config Map' .</li> <li> <p>Create a <code>ConfigMap</code> with the <code>index.html</code> using the content below:     <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;John Doe&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;John Doe&lt;/h1&gt;\n    &lt;p&gt;\n    Today I learned how to deploy my own website in the cloud\n    using an Apache HTTP Server (httpd) running on OpenShift.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>     (replace <code>John Doe</code> with your actual name - if you are John Doe you can skip this)</p> Try to create the <code>ConfigMap</code> definition file on your own using the template at  and the additional schema information  <p>Solution: <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: httpd\ndata:\nindex.html: |-\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;John Doe&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;John Doe&lt;/h1&gt;\n&lt;p&gt;\nToday I learned how to deploy my own website in the cloud\nusing an Apache HTTP Server (httpd) running on OpenShift.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>Press 'Create' .</p> </li> </ol> <p></p>"},{"location":"configmap/#mount-a-configmap","title":"Mount a <code>ConfigMap</code>","text":"<ol> <li>Navigate to 'Workloads' \u2192 'Deployments' .</li> <li>Open the 'Deployment Details' by clicking on the 'Name' .</li> <li>Switch to the 'YAML' tab .</li> <li>Add the highlighted parts to the <code>Deployment</code> defintion file in the editor :     <pre><code>apiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: httpd\n    spec:\n      volumes:\n      - name: html\n        configMap:\n          name: &lt;configmap name&gt; \n      containers:\n      - image: ubi9/httpd-24:latest\n        volumeMounts:\n        - name: html\n          mountPath: /var/www/html\n        ...\n</code></pre></li> <li>Press 'Save' .</li> <li>Reload your web site using the URL of the <code>Route</code> created in Exercise 3.</li> </ol>"},{"location":"configmap/#create-a-configmap_1","title":"Create a <code>ConfigMap</code>","text":"<ol> <li>Create a <code>index.html</code> file using the <code>vi</code> editor with the following content:     <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;John Doe&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;John Doe&lt;/h1&gt;\n    &lt;p&gt;\n    Today I learned how to deploy my own website in the cloud\n    using an Apache HTTP Server (httpd) running on OpenShift.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>     (replace <code>John Doe</code> with your actual name - if you are John Doe you can skip this)</li> <li> <p>Create a <code>ConfigMap</code> with the <code>index.html</code>.</p> Try to figure out how to create a new configmap named <code>httpd</code> based on a file using <code>oc create configmap -h</code> <p>Solution: <pre><code>oc create configmap httpd --from-file=index.html\n</code></pre></p> </li> </ol>"},{"location":"configmap/#inspect-a-configmap","title":"Inspect a <code>ConfigMap</code>","text":"<ol> <li>Inspect the created <code>ConfigMap</code> using <code>oc get</code> and <code>oc describe</code>.     <pre><code>oc get configmaps\n</code></pre> <pre><code>oc describe configmap &lt;configmap name&gt;\n</code></pre></li> <li>Also check the <code>ConfigMap</code> in the Web Console.</li> </ol>"},{"location":"configmap/#mount-a-configmap_1","title":"Mount a <code>ConfigMap</code>","text":"<ol> <li>Let's add the <code>ConfigMap</code> to the <code>Pod</code> template in the <code>Deployment</code>.     The <code>oc edit</code> command allows us to edit existing resources using the <code>vi</code> editor.     <pre><code>oc edit deployment &lt;deployment name&gt;\n</code></pre></li> <li>Add the highlighted parts to the <code>Deployment</code>:     <pre><code>apiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: httpd\n    spec:\n      volumes:\n      - name: html\n        configMap:\n          name: &lt;configmap name&gt; \n      containers:\n      - image: ubi9/httpd-24:latest\n        volumeMounts:\n        - name: html\n          mountPath: /var/www/html\n        ...\n</code></pre></li> <li>Store and close the file.     The configuration change triggers automatically a redeployment of all your <code>Pods</code> - wait a couple of seconds until it is done.</li> <li>Reload your web site using the URL of the <code>Route</code> created in Exercise 3.</li> </ol>"},{"location":"configmap/#congratulations-you-have-made-it","title":"\ud83c\udf89 Congratulations, you have made it!","text":"<p>You have successfully deployed your first personal website in the cloud using OpenShift. \ud83d\udc4f</p>"},{"location":"deployment/","title":"Exercise 2 - Deployments","text":"<p>You describe the desired state of your application in a <code>Deployment</code> by specifying the number of replicas and a <code>Pod</code> template. The <code>Deployment</code> involve a <code>ReplicaSet</code> to manage the <code>Pods</code> in the background.</p> <p>The <code>ReplicaSet</code> ensures that specified number of <code>Pod</code> replicas are running all the time. If a <code>Pod</code> crashes or is deleted the <code>ReplicaSet</code> creates new instances up to the defined number. Likewise, if there are more <code>Pods</code> running than desired, it deletes as many as necessary.</p> <p>Check out the OpenShift or Kubernetes Documentation for more information about <code>Deployments</code> and <code>ReplicaSets</code>.</p> <p>Note</p> <p>For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line  Interface (CLI)' section in oder to complete the exercise.</p> Web ConsoleCommand Line Interface (CLI) <p>Important</p> <p>At the beginning of the exercise make sure that you are in your project context.  <pre><code>oc project &lt;project name&gt; \n</code></pre></p>"},{"location":"deployment/#create-a-deployment","title":"Create a <code>Deployment</code>","text":"<ol> <li>Switch to the 'Administrator' view using the dropdown menu at .</li> <li>Navigate to 'Workloads' \u2192 'Deployments' .</li> <li>Switch to the your project using the dropdown menu at .    In each of the exercise make sure that you are in your project context before you are making any changes.</li> <li>Press 'Create Deployment' .</li> <li>Copy the following <code>Deployment</code> definition file to the editor : <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: httpd\nlabels:\napp: httpd\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp: httpd\ntemplate:\nmetadata:\nlabels:\napp: httpd\nspec:\ncontainers:\n- name: httpd-24\nimage: ubi9/httpd-24:latest\n</code></pre> More detailed information about the <code>Deployment</code> definition file can be found in the Tab at .</li> <li>Press 'Create' .</li> </ol>"},{"location":"deployment/#inspect-a-deployment","title":"Inspect a <code>Deployment</code>","text":"<p>Note</p> <p>If you have created the <code>Deployment</code> using the CLI:</p> <ol> <li>Repeat the steps 1 - 3 of the 'Create a Deployment' task above</li> <li>Open the 'Deployment Details' by clicking on the <code>Deployment</code> name in the 'Deployments' overview table. </li> </ol> <ol> <li>Check the 'Details' and status of the <code>Pods</code> of a <code>Deployment</code> by moving the mouse over the blue circle .     The status should be 'Running' after a couple of seconds.</li> <li>Additionally check the 'Pods'  and the 'Events' </li> </ol> What is the difference between the <code>Pod</code> that was created manually and the one that was created by the <code>Deployment</code>? <p>Solution:</p> <p>The <code>Pod</code> created from the <code>Deployment</code> have a random name.</p> <p>Example: <pre><code>httpd-12cf4d11ce-p9w5h\n</code></pre> The <code>Deployment</code> adds a random string (e.g. <code>12cf4d11ce</code>) to the deployment name while creating the <code>ReplicaSet</code>. The <code>ReplicaSet</code> itself adds  another random string to the each <code>Pod</code> (e.g. <code>p9w5h</code>).</p> <p></p> What happens if you delete a pod by opening  in the 'Pods' tab and clicking ? <p>Solution:</p> <p>The <code>ReplicaSet</code> of the <code>Deployment</code> automatically creates a new <code>Pod</code>. The same would happen if the application in the container of the <code>Pod</code> crashed or terminated. Check the 'Events' again to see what happend.</p>"},{"location":"deployment/#scale-a-deployment","title":"Scale a <code>Deployment</code>","text":"<ol> <li>Scale the <code>Deployment</code> to have another <code>Pod</code> of the application to achieve a redundant and stable setup by clicking on the up arrow at .</li> <li>Wait until both <code>Pods</code> are running and inspect agin the 'Events' .</li> </ol>"},{"location":"deployment/#create-a-deployment_1","title":"Create a <code>Deployment</code>","text":"<ol> <li>Create a <code>Deployment</code> of the Apache HTTP Server using the <code>oc create</code> command:     <pre><code>oc create deployment httpd --image ubi9/httpd-24:latest\n</code></pre>     The output of the command should look this:     <pre><code>[~] $ oc create deployment httpd --image ubi9/httpd-24:latest\ndeployment.apps/httpd created\n</code></pre></li> </ol>"},{"location":"deployment/#inspect-a-deployment_1","title":"Inspect a <code>Deployment</code>","text":"<ol> <li> <p>Let's verify the state of the <code>Deployment</code> that you have created using <code>oc get</code> and <code>oc describe</code>.     <pre><code>oc get deployments -o wide\n</code></pre> <pre><code>oc describe deployment &lt;deployment name&gt;\n</code></pre></p> </li> <li> <p>Inspect the pods the <code>Deployment</code> has created.     <pre><code>oc get pods\n</code></pre> <pre><code>oc get pods -o wide\n</code></pre></p> What is the difference between the <code>Pod</code> that was created manually and the one that was created by the <code>Deployment</code>? <p>Solution:</p> <p>The <code>Pod</code> created from the <code>Deployment</code> have a random name.</p> <p>Example: <pre><code>httpd-12cf4d11ce-p9w5h\n</code></pre> The <code>Deployment</code> adds a random string (e.g. <code>12cf4d11ce</code>) to the deployment name while creating the <code>ReplicaSet</code>. The <code>ReplicaSet</code> itself adds  another random string to the each <code>Pod</code> (e.g. <code>p9w5h</code>).</p> What happens if you delete a pod using <code>oc delete pod &lt;pod name&gt;</code>? <p>Solution:</p> <p>The <code>ReplicaSet</code> of the <code>Deployment</code> automatically creates a new <code>Pod</code>. The same would happen if the application in the container of the <code>Pod</code> crashed or terminated.</p> </li> <li> <p>Also check the 'Inspect a Deployment' section for the Web Console.</p> </li> </ol>"},{"location":"deployment/#scale-a-deployment_1","title":"Scale a <code>Deployment</code>","text":"<ol> <li>Scale the <code>Deployment</code> to have another <code>Pod</code> of the application to achieve a redundant and stable setup.     <pre><code>oc scale deployment &lt;deployment name&gt; --replicas=2\n</code></pre></li> <li>Inspect the <code>Deployment</code> and pods again.</li> </ol>"},{"location":"networking/","title":"Exercise 3 - Networking","text":"<p>Each <code>Pod</code> has its own IP address in order to access the application on it over the network. However,<code>Pods</code> are non-permanent resources which are created and destroyed by the <code>Deployment</code> dynamically. Therefore the IP addresses of your application are changing dynamically too and it is difficult to keeps track of which IP address to connect to.</p>"},{"location":"networking/#services","title":"Services","text":"<p>The <code>Service</code> is an abstract way to expose an application running on a set of <code>Pods</code> and load-balance the requests across them. Instead of connecting to the IP addresses of the <code>Pods</code> directly you can connect instead to its <code>Service</code>.</p> <p>Check out the Kubernetes Documentation for more information about <code>Services</code>.</p>"},{"location":"networking/#routes","title":"Routes","text":"<p>The <code>Route</code> allows to expose services through HTTP(S) via a public DNS entry. This is needed to make <code>Services</code> accessible from outside of the cluster.</p> <p>Check out the OpenShift Documentation for more information about <code>Routes</code>.</p> <p>Note</p> <p>For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line  Interface (CLI)' section in oder to complete the exercise.</p> Web ConsoleCommand Line Interface (CLI) <p>Important</p> <p>At the beginning of the exercise make sure that you are in your project context.  <pre><code>oc project &lt;project name&gt; \n</code></pre></p>"},{"location":"networking/#create-a-service","title":"Create a <code>Service</code>","text":"<ol> <li>Switch to the 'Administrator' view using the dropdown menu at .</li> <li>Navigate to 'Networking' \u2192 'Services' .</li> <li>Switch to the your project using the dropdown menu at .    In each of the exercise make sure that you are in your project context before you are making any changes.</li> <li>Press 'Create Service' .</li> <li>Let's create a <code>Service</code> for the port <code>8080</code>. Copy the following <code>Service</code> definition file to the editor  and replace <code>&lt;port&gt;</code> and <code>&lt;app label&gt;</code> with the correct value: <pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: httpd\nspec:\nselector:\napp: &lt;app label&gt;\nports:\n- protocol: TCP\nport: &lt;port&gt;\n</code></pre> More detailed information about the <code>Service</code> definition file can be found in the Tab at .</li> <li>Press 'Create' .</li> </ol>"},{"location":"networking/#create-a-route","title":"Create a <code>Route</code>","text":"<ol> <li>Navigate to 'Networking' \u2192 'Routes' .</li> <li>Press 'Create Route' .</li> <li>Set the 'Name'  to <code>httpd</code>.</li> <li>Select the 'Service' you have created above in .</li> <li>Choose the 'Target Port' <code>8080</code> from the dropdown menu .</li> <li>Let's secure the <code>Route</code> by enabling the checkbox  and selecting 'Edge' for 'TLS Termination' .</li> <li>Scroll until the end of the page and press 'Create'.</li> <li>Open the link  at the 'Route Details' page in order to test the route.</li> </ol>"},{"location":"networking/#create-a-service_1","title":"Create a <code>Service</code>","text":"<ol> <li>Create a <code>Service</code> for the port <code>8080</code> of the <code>Deployment</code> that we have created in Exercise 2:     <pre><code>oc expose deployment &lt;deployment name&gt; --port=&lt;port&gt;\n</code></pre></li> <li> <p>Inspect the <code>Service</code> using the <code>oc get</code> or the <code>oc describe</code> command.     <pre><code>oc get service -o wide\n</code></pre> <pre><code>oc describe service &lt;service name&gt;\n</code></pre></p> How many endpoints are connected to your <code>Service</code> and why? <p>Solution: </p> <p>There are 2 endpoints connected to your <code>Service</code>, you can figure that out by using the <code>oc describe</code> command.</p> <pre><code>[~] $ oc describe service &lt;service name&gt;\n...\nEndpoints: &lt;IP endpoint 1&gt;:8080,&lt;IP endpoint 2&gt;:8080\n...\n</code></pre> <p>The reason that there are 2 endpoints is that we have 2 replicas configured in the <code>Deployment</code>. Let's compare the IP addresses of the endpoints with the IP address of each <code>Pod</code>.  The IP address of the <code>Pods</code> can be retrieved using the <code>oc get pods -o wide</code> command. As you can see the <code>Service</code> is successfully connected to all <code>Pods</code> of your <code>Deployment</code>.</p> </li> </ol>"},{"location":"networking/#create-a-route_1","title":"Create a <code>Route</code>","text":"<ol> <li>Create a <code>Route</code> in order to make the <code>Service</code> accessible from outside of the cluster.     <pre><code>oc create route edge httpd --service=&lt;service name&gt;\n</code></pre></li> <li>Inspect the new <code>Route</code> using the <code>oc get</code> command.     <pre><code>oc get routes\n</code></pre></li> <li>Try to connect to the <code>https://HOST</code> of the <code>Route</code> using the browser in order to test the route.</li> </ol>"},{"location":"pod/","title":"Exercise 1 - Pods","text":"<p>The goal of this exercise is to run our first application, an Apache HTTP Server, in OpenShift. For this we use a <code>Pod</code> which is the smallest deployable unit of computing that you can create  and manage in OpenShift. A <code>Pod</code> is a group of one or more containers. In this exercise, we will deploy a <code>Pod</code> that runs a single container with the image <code>ubi9/httpd-24:latest</code>.</p> <p>Note</p> <p>For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line  Interface (CLI)' section in oder to complete the exercise.</p> Web ConsoleCommand Line Interface (CLI) <p>Important</p> <p>At the beginning of the exercise make sure that you are in your project context.  <pre><code>oc project &lt;project name&gt; \n</code></pre> (replace <code>&lt;projet name&gt;</code> with the actual name of your own project)</p>"},{"location":"pod/#create-a-pod","title":"Create a <code>Pod</code>","text":"<ol> <li>Switch to the 'Administrator' view using the dropdown menu at .</li> <li>Navigate to 'Workloads' \u2192 'Pods' .</li> <li>Switch to the your project using the dropdown menu at .    In each of the exercise make sure that you are in your project context before you are making any changes.</li> <li>Press 'Create Pod' .</li> <li>Copy the following <code>Pod</code> definition file to the editor :     <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\nname: httpd\nspec:\ncontainers:\n- name: httpd-24\nimage: ubi9/httpd-24:latest\n</code></pre> More detailed information about the <code>Pod</code> definition file can be found in the Tab at .</li> <li>Press 'Create' .</li> </ol>"},{"location":"pod/#inspect-a-pod","title":"Inspect a <code>Pod</code>","text":"<p>Note</p> <p>If you have created the <code>Pod</code> using the CLI:</p> <ol> <li>Repeat the steps 1 - 3 of the 'Create a Pod' task above</li> <li>Open the 'Pod Details' by clicking on the <code>Pod</code> name in the 'Pods' overview table. </li> </ol> <ol> <li>Check the status of the <code>Pod</code> at . The status should be 'Running' after a couple of seconds.</li> <li>Check the 'Details'  of your <code>Pod</code>.</li> <li>In order to verify if the application in the <code>Pod</code> was started successfully, have a quick look into the 'Logs' .</li> <li>Also check the 'Inspect a Pod' section for the CLI.</li> </ol>"},{"location":"pod/#delete-a-pod","title":"Delete a <code>Pod</code>","text":"<p>You won't need the <code>Pod</code> in the following exercises, therefore clean up your project.</p> <ol> <li>Navigate to the 'Actions' dropdown menu  in the 'Pod Details'.</li> <li>Press 'Delete Pod' .</li> </ol>"},{"location":"pod/#create-a-pod_1","title":"Create a <code>Pod</code>","text":"<ol> <li> <p>Create a <code>Pod</code> definition file called <code>pod.yaml</code> using the <code>vi</code> editor with the following content:     <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\nname: httpd\nspec:\ncontainers:\n- name: httpd-24\nimage: ubi9/httpd-24:latest\n</code></pre> More detailed information about the <code>Pod</code> definition file  can be found in the    OpenShift or Kubernetes Documentation.</p> </li> <li> <p>Create a <code>Pod</code> by using the <code>oc apply</code> command.     <pre><code>oc apply -f pod.yaml\n</code></pre>     The output of the command should look like this:     <pre><code>[~] $ oc apply -f pod.yaml\npod/httpd created\n</code></pre></p> </li> </ol>"},{"location":"pod/#inspect-a-pod_1","title":"Inspect a <code>Pod</code>","text":"<ol> <li>Let's verify the state of the <code>Pod</code> that you have created using <code>oc get</code>.     <pre><code>oc get pods \n</code></pre>     You can choose the output format <code>&lt;output format&gt;</code> with the <code>-o</code> flag.      Try some of the formats: <code>wide</code>, <code>json</code>, <code>yaml</code> <pre><code>oc get pods -o &lt;output format&gt;\n</code></pre></li> <li><code>oc describe</code> can be used to get detailed description of a given resource.      Inspect the information and events of your <code>Pod</code>.     <pre><code>oc describe pod &lt;pod name&gt;\n</code></pre></li> <li>Print the logs for a container in a <code>Pod</code> using the <code>oc logs</code> command     in order to check if the application in the <code>Pod</code> was started successfully.     <pre><code>oc logs &lt;pod name&gt;\n</code></pre></li> <li>Also check the 'Inspect a Pod' section for the Web Console.</li> </ol>"},{"location":"pod/#delete-a-pod_1","title":"Delete a <code>Pod</code>","text":"<ol> <li>You won't need the <code>Pod</code> in the following exercises, therefore clean up your project.     <pre><code>oc delete pod &lt;pod name&gt;\n</code></pre></li> </ol>"},{"location":"project/","title":"Exercise 0 - Projects","text":"<p>First of all everyone needs his own OpenShift Project, so let's create one.</p> <p>Note</p> <p>For each exercise you can choose and only have to do either the 'Web Console' or the 'Command Line  Interface (CLI)' section in oder to complete the exercise.</p> Web ConsoleCommand Line Interface (CLI) <ol> <li>Create your own 'Project' using the <code>oc new-project</code> command and write down your 'Project Name' you will need that in the following Exercises.     <pre><code>oc new-project playground-user&lt;id&gt;\n</code></pre>     (replace <code>&lt;id&gt;</code> with your actual ID)</li> <li>Switch to your 'Project' using <code>oc project</code>.     <pre><code>oc project &lt;project name&gt;\n</code></pre></li> </ol>"},{"location":"project/#create-a-project","title":"Create a Project","text":"<ol> <li>Switch to the 'Administartor' view using the dropdown menu at .</li> <li>Navigate to 'Home' \u2192 'Projects' .</li> <li>Press 'Create Project' .</li> <li>Set the 'Name'  to <code>playground-user&lt;id&gt;</code> (replace <code>&lt;id&gt;</code> with your actual ID) and choose a 'Display Name'  as well as a 'Description'  (write down your 'Project Name' you will need that in the following Exercises).</li> <li>Press 'Create' .</li> </ol>"},{"location":"vieditor/","title":"<code>vi</code> Editor","text":""},{"location":"vieditor/#view-a-file","title":"View a file","text":"<ol> <li>Open a file:     <pre><code>vi &lt;file name&gt;\n</code></pre></li> <li>Close the file by typing <code>:q</code> and press <code>ENTER</code></li> </ol>"},{"location":"vieditor/#editcreate-a-file","title":"Edit/Create a file","text":"<ol> <li>Open or create a file:     <pre><code>vi &lt;file name&gt;\n</code></pre></li> <li>Press <code>i</code> to activate the insert mode</li> <li>Navigate to the right location using the arrow keys: <code>\u2190</code> <code>\u2191</code> <code>\u2192</code> <code>\u2193</code></li> <li> <p>Modify or add some content</p> <p>Note</p> <p>Use <code>Ctrl</code> <code>Shift</code> + <code>c</code>  and <code>Ctrl</code> <code>Shift</code> + <code>v</code> for copy/paste content in the <code>vi</code> editor`.</p> </li> <li> <p>Press <code>ESC</code> to exit the insert mode</p> </li> <li>Store and close the file by typing <code>:wq</code> and press <code>ENTER</code></li> </ol>"}]}